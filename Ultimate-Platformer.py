#imports
import tkinter
from tkinter import *
import random
import math
random.seed()
 
building = False #build variable
 
Level



    ,'0000000000000000000000000000000000007000000000000000000000000000000060000000000000000000000000000000600000000000000000000000000000006000000300000000000000000000000066666001000000000073000000000000000000010000070000110000000000000000005100001100000000000000000000000011000040000000000300000000000000010000000000000001000000000037777100000000000000610000077700111111000977700000000100000111004888810001111000011101660000000000000100000000000000018000077700000001000000000000000100000111000000013333333333333331000000000090000111111111111111110070000000100001000000000001000100660000000000010000000000010001000800000000000100000000000400040000000000000004000030000000000000000000333090000003130003000900003000001111111111111111111111111110000000000000000000000000000000000000000000000000200000000000000000000000000000011100000000000000000000000000000000000000000000000000000000000000000000000000000006660006660000666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'

 
lvl = 0
 
SpawnPos = [481,379,418,132,376,784]
Terrain = [0] * 1026
Terrain[1024] = 0
Terrain[1025] = 1
 
ButtonPressed = False
Colors = ['#dddddd','#555555','#55d444','#dd4444','#dd4444','#3366cc','#3366cc','#3366cc','#3366cc','#a06020','#aaaaaa']
Solid = [False,True,False,False,False,False,ButtonPressed,False,False,False]
 
PlayerBody = [0,0,0,0]
Springs = [0] * 1024
ActiveSprings = []
 
inRight = False
inLeft = False
inUp = False
 
def file(event): #build
    x = ''
    for i in range(0,1024):
        x += str(Terrain[i])
    print(x)
 
def click(event): #build
    x = event.x
    y = event.y
    print(pos(x,y))
    Terrain[min(1023,pos(x,y))] = (Terrain[min(1023,pos(x,y))] + 1) % 10
    drawTerrain()
#key events
def rightOn(event):
    global inRight
    inRight = True
 
def rightOff(event):
    global inRight
    inRight = False
 
def leftOn(event):
    global inLeft
    inLeft = True
 
def leftOff(event):
    global inLeft
    inLeft = False
 
def upOn(event):
    global inUp
    inUp = True
 
def upOff(event):
    global inUp
    inUp = False
#pos functions
def tileX(t):
    return (t%32)*25+13
 
def tileY(t):
    return math.floor(t/32)*25+13
 
def pos(x,y): #index in Terrain at (x,y)
    if y > 799 : return 1024
    if x < 3 or x > 799 or y < 0: return 1025
    return math.floor(x/25) + 32 * math.floor(y/25)
 
#check functions
def checkPos():
    return Solid[Terrain[pos(playerX+10, playerY+10)]] or Solid[Terrain[pos(playerX+10, playerY-10)]] or Solid[Terrain[pos(playerX-10, playerY+10)]] or Solid[Terrain[pos(playerX-10, playerY-10)]]
 
def checkArc(t):
    return Terrain[pos(playerX+8, playerY-5)] == t or Terrain[pos(playerX-8, playerY-5)] == t
 
def checkSpike():
    return Terrain[pos(playerX+8, playerY+5)] == 3 or Terrain[pos(playerX-8, playerY+5)] == 3 or (ButtonPressed and (Terrain[pos(playerX+8, playerY+5)] == 7 or Terrain[pos(playerX-8, playerY+5)] == 7))
 
def checkSpikeDown():
    return Terrain[pos(playerX+8, playerY-5)] == 4 or Terrain[pos(playerX-8, playerY-5)] == 4 or (ButtonPressed and (Terrain[pos(playerX+8, playerY+5)] == 8 or Terrain[pos(playerX-8, playerY+5)] == 8))
 
def checkSpring():
    return Terrain[pos(playerX+10, playerY)] == 9 or Terrain[pos(playerX-10, playerY)] == 9
 
#draw functions
def drawTerrain():
    global Springs
    Solid[6] = ButtonPressed
    Springs = [0] * 1024
    c.delete('all')
    c.create_rectangle((0,0),(800,800), width=0, fill=Colors[0])
    k = 991
    for x in range(0,32):
        k -= 1023
        for y in range(0,32):
            k += 32
            t = Terrain[k]
            if t == 1 or (t == 6 and ButtonPressed): c.create_rectangle((x*25,y*25),((x+1)*25,(y+1)*25), width = 0, fill=Colors[t])
            else:
                if t == 2 or (t == 5 and not ButtonPressed): c.create_arc((x*25,y*25+13),((x+1)*25,y*25+38), start=0, extent=180, outline=Colors[t], fill=Colors[t])
                elif t == 3 or (t == 7 and ButtonPressed): c.create_polygon((x*25,(y+1)*25),((x+1)*25,(y+1)*25),(x*25+13,y*25), width = 0, fill = Colors[t])
                elif t == 4 or (t == 8 and ButtonPressed): c.create_polygon((x*25,y*25),((x+1)*25,y*25),(x*25+13,(y+1)*25), width = 0, fill = Colors[t])
                elif t == 9:
                    Springs[k] = [x,y,False,0,0,0,0] #[x,y,pressed?,line1,line2,plateTop,plateBottom]
                    drawSpring(k)
def drawPlayer():
    PlayerBody[0] = c.create_rectangle((playerX-12+min(0,0.5*playerXV),playerY-12+min(0,0.5*playerYV)),(playerX+12+max(0,0.5*playerXV),playerY+12+max(0,0.5*playerYV)), width=0, fill ='#cc9900')
    PlayerBody[1] = c.create_rectangle((playerX-9,playerY-9),(playerX+9,playerY+9), width=0, fill='#eecc00')
    PlayerBody[2] = c.create_rectangle((playerX-5,playerY+4),(playerX-1,playerY-5), width=0, fill='#000000')
    PlayerBody[3] = c.create_rectangle((playerX+1,playerY+4),(playerX+5,playerY-5), width=0, fill='#000000')
 
def drawSpring(k):
    x = Springs[k][0]
    y = Springs[k][1]
    if Springs[k][2]:
        Springs[k][3] = c.create_line((x*25,y*25+9),(x*25+24,y*25+21), width = 3, fill=Colors[10])
        Springs[k][4] = c.create_line((x*25,y*25+21),(x*25+24,y*25+9), width = 3, fill=Colors[10])
        Springs[k][5] = c.create_rectangle((x*25,y*25+5),((x+1)*25,y*25+13), width = 0, fill=Colors[9])
        Springs[k][6] = c.create_rectangle((x*25,y*25+25),((x+1)*25,y*25+17), width = 0, fill=Colors[9])
    else:
        Springs[k][3] = c.create_line((x*25,y*25+4),(x*25+24,y*25+21), width = 3, fill=Colors[10])
        Springs[k][4] = c.create_line((x*25,y*25+21),(x*25+24,y*25+4), width = 3, fill=Colors[10])
        Springs[k][5] = c.create_rectangle((x*25,y*25),((x+1)*25,y*25+8), width = 0, fill=Colors[9])
        Springs[k][6] = c.create_rectangle((x*25,y*25+25),((x+1)*25,y*25+17), width = 0, fill=Colors[9])
 
#main functions
def genTerrain():
    global playerX
    global playerY
    global ButtonPressed
 
    ButtonPressed = False
    for i in range(0,1024):
        Terrain[i] = int((Level[lvl])[i])
def die():
    global playerX
    global playerY
    global playerXV
    global playerYV
    global ButtonPressed
    playerX = tileX(SpawnPos[lvl])
    playerY = tileY(SpawnPos[lvl])
    playerXV = 0
    playerYV = 0
    if ButtonPressed:
        ButtonPressed = False
        drawTerrain()
 
def update(): #called every frame
    global playerX
    global playerY
    global playerXV
    global playerYV
    global coyoteTime
    global lvl
    global ButtonPressed  
 
    if playerYV >= 0 and (Solid[Terrain[pos(playerX+10, playerY+20)]] or Solid[Terrain[pos(playerX-10, playerY+20)]]): coyoteTime = 6
    coyoteTime = max(coyoteTime-1,0)
 
    #move player
    playerYV += 1
    if inRight: playerXV += 0.5
    if inLeft: playerXV -= 0.5
    if checkSpring():
        if lvl == 5:
            if inUp: playerYV = -40
            else: playerYV = -20
        else:
            if inUp: playerYV = -27
            else: playerYV = -17   
        coyoteTime = 0
    if inUp and coyoteTime > 0:
        playerYV = -19
        coyoteTime = 0
    playerXV *= 0.9
    playerYV *= 0.9
    playerX += playerXV
    if checkPos():
        playerX -= playerXV
        playerXV = 0
    playerY += playerYV
    if checkPos():
        if playerYV > 0 and checkSpring():
            playerY -= playerYV
            playerYV = -19
        else:
            playerY -= playerYV
            playerYV = 0
 
    #update springs
    for i in range(len(ActiveSprings)-1,-1,-1):
        k = ActiveSprings[i][0]
        x = Springs[k][0]
        y = Springs[k][1]
        if ActiveSprings[i][1] == 0 and pos(playerX+10, playerY+10) != k and pos(playerX-10, playerY+10) != k:
            Springs[k][2] = False
            for j in range(3,7):
                c.delete(Springs[k][j])
            drawSpring(k)
            ActiveSprings.pop(i)
        else: ActiveSprings[i][1] = max(ActiveSprings[i][1]-1,0)
 
    k = pos(playerX+10, playerY+15)
    if Terrain[k] == 9:
        Springs[k][2] = True
        for i in range(3,7):
            c.delete(Springs[k][i])
        drawSpring(k)
        ActiveSprings.append([k,7])
 
    k = pos(playerX-10, playerY+15)
    if Terrain[k] == 9:
        Springs[k][2] = True
        for i in range(3,7):
            c.delete(Springs[k][i])
        drawSpring(k)
        ActiveSprings.append([k,7])
    #draw player
    for i in range(0,4):
        c.delete(PlayerBody[i])
    drawPlayer()
 
    if playerY > 1000 or checkSpike() or checkSpikeDown(): die()
    if checkArc(2):
        lvl += 1
        genTerrain()
        drawTerrain()
        drawPlayer()
 
    if not ButtonPressed and checkArc(5):
        ButtonPressed = True
        drawTerrain()
        drawPlayer()
    w.after(10,update)
 
playerX = tileX(SpawnPos[0])
playerY = tileY(SpawnPos[0])
playerXV = 0
playerYV = 0
coyoteTime = 0
#initialize scene
w = tkinter.Tk()
w.title('Ultimate Platformer')
c = tkinter.Canvas(w, width=800, height=800)
c.pack()
genTerrain()
drawTerrain()
drawPlayer()
 
#bind keys
w.bind('<Right>', rightOn)
w.bind('<KeyRelease-Right>', rightOff)
w.bind('<Left>', leftOn)
w.bind('<KeyRelease-Left>', leftOff)
w.bind('<Up>', upOn)
w.bind('<KeyRelease-Up>', upOff)
 
if building: #build
    w.bind('<KeyRelease-e>', file)
    c.bind("<Button-1>", click)
 
update()
 
w.mainloop()
